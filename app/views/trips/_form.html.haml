.well
  = simple_form_for @trip_proxy, :url => user_trips_path, :html => {:class => "form-horizontal"} do |f| 
    = f.hidden_field :mode
    = f.hidden_field :from_place_selected, :id => "from_place_selected"
    = f.hidden_field :to_place_selected, :id => "to_place_selected"
    = f.hidden_field :from_place_selected_type, :id => "from_place_selected_type"
    = f.hidden_field :to_place_selected_type, :id => "to_place_selected_type"

    - if user_signed_in?
      = f.input :from_place, :wrapper => :append, :class => "inline span12", :label => t(:from) do
        = f.text_field :from_place, :placeholder => t(:enter_address), :id => "from_address", :autocomplete => "off", :class => "ajax-typeahead", :data => {:link => search_user_places_path, :provide => "typeahead"}
        %span.dropdown
          %a.add-on.btn.dropdown-toggle{:data => {:toggle => 'dropdown'}, :href => '#'}
            %span.caret
          %ul.dropdown-menu{:data => {:target => 'from_address'}}
            - @traveler.places.each do |p|
              %li
                %a.place-option{:data => {:value => p.name, :id => p.id, :latlon => [p.lat, p.lon], :type => "from"}}
                  = p.name
    - else
      = f.input :from_place, :class => "inline span12", :label => t(:from) do
        = f.text_field :from_place, :placeholder => t(:enter_address), :id => "from_address", :autocomplete => "off", :class => "ajax-typeahead", :data => {:link => search_user_places_path, :provide => "typeahead"}
    - unless @trip_proxy.from_place_options.blank?
      = f.input :from_place_options, as: :select
    / = render :partial => 'alt_address_select', :locals => {:results => @trip_proxy.from_place_results, :type => "from"} unless @trip_proxy.from_place.blank? || @trip_proxy.from_place_selected_type == "1"

    - if user_signed_in?
      = f.input :to_place, :wrapper => :append, :class => "inline span12", :label => t(:to) do
        = f.text_field :to_place, :placeholder => t(:enter_address), :id => "to_address", :autocomplete => "off", :class => "ajax-typeahead", :data => {:link => search_user_places_path, :provide => "typeahead"}
        %span.dropdown
          %a.add-on.btn.dropdown-toggle{:data => {:toggle => 'dropdown'}, :href => '#'}
            %span.caret
          %ul.dropdown-menu{:data => {:target => 'to_address'}}
            - @traveler.places.each do |p|
              %li
                %a.place-option{:data => {:value => p.name, :id => p.id, :latlon => [p.lat, p.lon], :type => "to"}}
                  = p.name
    - else    
      = f.input :to_place, :class => "inline span12", :label => t(:to) do
        = f.text_field :to_place, :placeholder => t(:enter_address), :id => "to_address", :class => "ajax-typeahead", :autocomplete => "off", :data => {:link => search_user_places_path, :provide => "typeahead"} 

    = render :partial => 'alt_address_select', :locals => {:results => @trip_proxy.to_place_results, :type => "to"} unless @trip_proxy.to_place.blank? || @trip_proxy.to_place_selected_type == "1"

    = f.input :trip_date, :wrapper => :append, :label => t(:date) do
      #trip-date
        = f.input_field :trip_date, :as => :string, :label => false, :size => ""
        %span.add-on
          %i.icon-calendar

    = f.input :arrive_depart, :collection => [t(:departing_at), t(:arriving_by)], :include_blank => false, :label => t(:arrive_depart)

    = f.input :trip_time, :wrapper => :append, :label => t(:time) do
      #trip-time
        = f.input_field :trip_time, :as => :string, :label => false, :size => ""
        %span.add-on
          %i.icon-time

    = f.input :trip_purpose_id, :collection => TripPurpose.all, :label => t(:trip_purpose)
                
    .form-actions
      = button_tag :type => 'submit', :class => "btn btn-primary" do
        %i{class: "icon #{CsHelpers::ACTION_ICONS[:plan_a_trip]}"}
        = t(:plan_it)
      = link_to t(:cancel), :back
                
:javascript
  $.fn.datepicker.Calendar.setDefaultLocale("#{I18n.locale}");
  
  $('#trip-date').datepicker().on("dateChange", function(e) {
      $('#trip_proxy_trip_date').val(Date.format(e.date, "mm/dd/yyyy"));
  });  
  
  $('#trip-time').timepicker({
    'timeFormat': 'g:i a',
    'scrollDefaultTime': '9:00 am'
    }).on("changeTime", function(e) {
        $('#trip_proxy_trip_time').val($('#trip-time').data('ui-timepicker-value'));
  });
    
  $(document).ready(function(){
    $('.combobox').combobox({
      force_match: false
    });
  });
  
  $('.dropdown-toggle').dropdown();

  // User has selected a pre-defined place from the dropdown.
  $('.place-option').on('click', function(event) {
    var t = $(event.target);
    var id = t.data('id');
    var from_to = t.data('type');
    var name = t.data('value');
    if (from_to == 'from') {
      $('#from_place_selected').val(id);
      $('#from_place_selected_type').val(3);
    } else {
      $('#to_place_selected').val(id);
      $('#to_place_selected_type').val(3);
    }
    $('#' + t.parents('ul').data('target')).val(name);
  });

  // User has selected a an alternate address from the list
  $('.address_select').bind('click', function(event) {
    var t = $(event.target);
    var id = t.data('id');
    var from_to = t.data('type');
    var name = t.text().trim();
    var update_target;
    var hidden_val;
    var hidden_type;
    if (from_to == 'from') {
      update_target = $('#from_address');
      hidden_val = $('#from_place_selected');
      hidden_type = $('#from_place_selected_type');      
    } else {
      update_target = $('#to_address');
      hidden_val = $('#to_place_selected');
      hidden_type = $('#to_place_selected_type');      
    }
    hidden_val.val(id);
    hidden_type.val(4);
    update_target.val(name);
  });

  // Add change listeners on the text fields
  $("#from_address").bind("keyup input paste", function() {
    $('#from_place_selected').val("");
    $('#from_place_selected_type').val("");    
  });
  // Add change listeners on the text fields
  $("#to_address").bind("keyup input paste", function() {
    $('#to_place_selected').val("");
    $('#to_place_selected_type').val("");    
  });

  // Enable typeahead for the places forms
  $('#from_address').typeahead({
      items: 20,
      source: function(query, process) {
          return $.ajax({
              url: $('#from_address').data('link'),
              type: 'get',
              data: {
                query: query
              },
              dataType: 'json',
              success: function(result) {

                var resultList = result.map(function (item) {
                    var aItem = { index: item.index, type: item.type, id: item.id, name: item.name, lat: item.lat, lon: item.lon, addr: item.address };
                    return JSON.stringify(aItem);
                });

                return process(resultList);
              }
          });
      },
    matcher: function (obj) {
        var item = JSON.parse(obj);
        return ~item.name.toLowerCase().indexOf(this.query.toLowerCase())
    },

    sorter: function (items) {          
       var beginswith = [], caseSensitive = [], caseInsensitive = [], item;
        while (aItem = items.shift()) {
            var item = JSON.parse(aItem);
            if (!item.name.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(JSON.stringify(item));
            else if (~item.name.indexOf(this.query)) caseSensitive.push(JSON.stringify(item));
            else caseInsensitive.push(JSON.stringify(item));
        }

        return beginswith.concat(caseSensitive, caseInsensitive)

    },


    highlighter: function (obj) {
        var item = JSON.parse(obj);
        var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
        return item.name.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
            return '<strong>' + match + '</strong>'
        })
    },

    updater: function (obj) {
        var item = JSON.parse(obj);
        $('#from_place_selected_type').attr('value', item.type);
        $('#from_place_selected').attr('value', item.id);
        return item.name;
    }  
  });  
  
  // Enable typeahead for the places forms
  $('#to_address').typeahead({
      items: 20,
      source: function(query, process) {
          return $.ajax({
              url: $('#to_address').data('link'),
              type: 'get',
              data: {
                query: query
              },
              dataType: 'json',
              success: function(result) {

                var resultList = result.map(function (item) {
                    var aItem = { index: item.index, type: item.type, id: item.id, name: item.name, lat: item.lat, lon: item.lon, addr: item.address };
                    return JSON.stringify(aItem);
                });

                return process(resultList);
              }
          });
      },
    matcher: function (obj) {
        var item = JSON.parse(obj);
        return ~item.name.toLowerCase().indexOf(this.query.toLowerCase())
    },

    sorter: function (items) {          
       var beginswith = [], caseSensitive = [], caseInsensitive = [], item;
        while (aItem = items.shift()) {
            var item = JSON.parse(aItem);
            if (!item.name.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(JSON.stringify(item));
            else if (~item.name.indexOf(this.query)) caseSensitive.push(JSON.stringify(item));
            else caseInsensitive.push(JSON.stringify(item));
        }

        return beginswith.concat(caseSensitive, caseInsensitive)

    },


    highlighter: function (obj) {
        var item = JSON.parse(obj);
        var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
        return item.name.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
            return '<strong>' + match + '</strong>'
        })
    },

    updater: function (obj) {
        var item = JSON.parse(obj);
        $('#to_place_selected_type').attr('value', item.type);
        $('#to_place_selected').attr('value', item.id);
        return item.name;
    }  
  });  
  
